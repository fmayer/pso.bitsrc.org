// Generated by CoffeeScript 1.6.3
(function() {
  var ARPSO, GoogleVisualize, PSO, PSOExecutor, Particle, calc_d, clip_to, clip_to2, random_point, random_vel,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Particle = (function() {
    function Particle(pos, v, bestpos, bestvalue) {
      this.pos = pos;
      this.v = v;
      this.bestpos = bestpos;
      this.bestvalue = bestvalue;
    }

    return Particle;

  })();

  random_point = function(dim_min, dim_max) {
    var _this = this;
    return dim_min.add(dim_max.subtract(dim_min).map(function(x) {
      return x * Math.random();
    }));
  };

  random_vel = function(dim_min, dim_max) {
    var _this = this;
    return dim_max.subtract(dim_min).map(function(x) {
      return 2 * x * (Math.random() - 0.5);
    });
  };

  clip_to = function(dim_min, dim_max, v) {
    var _this = this;
    return v.map(function(x, i) {
      var r;
      r = dim_max.e(i) - dim_min.e(i);
      if (x < -r) {
        return -r;
      } else if (x > r) {
        return r;
      } else {
        return x;
      }
    });
  };

  clip_to2 = function(dim_min, dim_max, v) {
    var _this = this;
    return v.map(function(x, i) {
      if (x < dim_min.e(i)) {
        return dim_min.e(i);
      } else if (x > dim_max.e(i)) {
        return dim_max.e(i);
      } else {
        return x;
      }
    });
  };

  calc_d = function(pso) {
    var average, d, n, p, poss,
      _this = this;
    poss = (function() {
      var _i, _len, _ref, _results;
      _ref = pso.particles;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        _results.push(p.pos);
      }
      return _results;
    })();
    n = pso.particles.length;
    average = poss.reduce(function(x, y) {
      return x.add(y);
    }).map(function(x) {
      return x / n;
    });
    d = poss.map(function(p) {
      return p.subtract(average).modulus();
    }).reduce(function(x, y) {
      return x + y;
    });
    return d /= pso.l * n;
  };

  PSO = (function() {
    function PSO(f, dim_min, dim_max, nparticles, inertia, phi1, phi2) {
      var i;
      this.f = f;
      this.dim_min = dim_min;
      this.dim_max = dim_max;
      this.nparticles = nparticles;
      this.inertia = inertia != null ? inertia : 0.7298;
      this.phi1 = phi1 != null ? phi1 : 1.49609;
      this.phi2 = phi2 != null ? phi2 : 1.49609;
      this.particles = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 1, _ref = this.nparticles; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
          _results.push(new Particle(random_point(this.dim_min, this.dim_max), random_vel(this.dim_min, this.dim_max), null, null));
        }
        return _results;
      }).call(this);
      this.gbest = null;
      this.dim = 1.0;
      this.l = this.dim_min.subtract(this.dim_max).modulus();
    }

    PSO.prototype.step = function() {
      var particle, value, _i, _j, _len, _len1, _ref, _ref1, _results,
        _this = this;
      _ref = this.particles;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        particle = _ref[_i];
        value = this.f(particle.pos);
        if (particle.bestvalue === null || value < particle.bestvalue) {
          particle.bestpos = particle.pos;
          particle.bestvalue = value;
        }
        if (this.gbest === null || value < this.gbest.bestvalue) {
          this.gbest = particle;
        }
      }
      _ref1 = this.particles;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        particle = _ref1[_j];
        particle.v = particle.v.map(function(x, i) {
          return _this.inertia * x + _this.dim * (_this.phi1 * Math.random() * (particle.bestpos.e(i) - particle.pos.e(i)) + _this.phi2 * Math.random() * (_this.gbest.bestpos.e(i) - particle.pos.e(i)));
        });
        _results.push(particle.pos = particle.pos.add(particle.v));
      }
      return _results;
    };

    return PSO;

  })();

  ARPSO = (function(_super) {
    __extends(ARPSO, _super);

    function ARPSO(f, dim_min, dim_max, nparticles, inertia, phi1, phi2) {
      this.f = f;
      this.dim_min = dim_min;
      this.dim_max = dim_max;
      this.nparticles = nparticles;
      this.inertia = inertia != null ? inertia : 0.7298;
      this.phi1 = phi1 != null ? phi1 : 1.49609;
      this.phi2 = phi2 != null ? phi2 : 1.49609;
      ARPSO.__super__.constructor.call(this, this.f, this.dim_min, this.dim_max, this.nparticles, this.inertia, this.phi1, this.phi2);
      this.dmin = 5e-6;
      this.dmax = 0.25;
    }

    ARPSO.prototype.step = function() {
      var d;
      d = calc_d(this);
      if (this.dim === 1 && d < this.dmin) {
        this.dim = -1;
      } else if (this.dim === -1 && d > this.dmax) {
        this.dim = 1;
      }
      return ARPSO.__super__.step.call(this);
    };

    return ARPSO;

  })(PSO);

  PSOExecutor = (function() {
    function PSOExecutor(pso, sample) {
      this.pso = pso;
      this.sample = sample != null ? sample : 1;
      this.bestvalues = [];
      this.particlepos = [];
      this.bestvalues = [];
      this.ds = [];
    }

    PSOExecutor.prototype.run = function(iters) {
      var i, p, v, _i, _j, _len, _ref, _results;
      _results = [];
      for (i = _i = 0; 0 <= iters ? _i < iters : _i > iters; i = 0 <= iters ? ++_i : --_i) {
        if ((i % this.sample) === 0) {
          v = [];
          _ref = this.pso.particles;
          for (_j = 0, _len = _ref.length; _j < _len; _j++) {
            p = _ref[_j];
            v.push([p.pos.e(1), p.pos.e(2)]);
          }
          this.particlepos.push(v);
          this.ds.push(calc_d(this.pso));
          this.pso.step();
          _results.push(this.bestvalues.push(this.pso.gbest.bestvalue));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return PSOExecutor;

  })();

  GoogleVisualize = (function() {
    function GoogleVisualize(ex) {
      this.ex = ex;
      this.chart = new google.visualization.LineChart(document.getElementById('chart_div'));
      this.chart2 = new google.visualization.ScatterChart(document.getElementById('chart2_div'));
      this.chart3 = new google.visualization.LineChart(document.getElementById('chart3_div'));
      this.n = 0;
      this.interval = null;
      this.options = {
        hAxis: {
          viewWindow: {
            min: -50,
            max: 50
          }
        },
        vAxis: {
          viewWindow: {
            min: -50,
            max: 50
          }
        }
      };
    }

    GoogleVisualize.prototype.select = function(n) {
      var v, vs2, _i, _len, _ref;
      vs2 = [["x", "y"]];
      _ref = this.ex.particlepos[n];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        vs2.push(v);
      }
      this.chart2.draw(google.visualization.arrayToDataTable(vs2), this.options);
      this.chart3.setSelection([
        {
          row: n
        }
      ]);
      return this.chart.setSelection([
        {
          row: n
        }
      ]);
    };

    GoogleVisualize.prototype.visualize = function() {
      var dt, dt2, dt3, i, v, vs, vs2, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2,
        _this = this;
      i = 0;
      vs = [["Generation", "Fitness of solution"]];
      _ref = this.ex.bestvalues;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        i += 1;
        vs.push([this.ex.sample * i, v]);
      }
      dt = google.visualization.arrayToDataTable(vs);
      google.visualization.events.addListener(this.chart, 'ready', function() {
        return google.visualization.events.addListener(_this.chart, 'select', function() {
          if (_this.chart.getSelection()[0] == null) {
            return;
          }
          if (_this.chart.getSelection()[0].row == null) {
            return;
          }
          _this.n = _this.chart.getSelection()[0].row;
          return _this.select(_this.n);
        });
      });
      this.chart.draw(dt);
      vs2 = [["x", "y"]];
      _ref1 = this.ex.particlepos[0];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        v = _ref1[_j];
        vs2.push(v);
      }
      dt2 = google.visualization.arrayToDataTable(vs2);
      this.chart2 = new google.visualization.ScatterChart(document.getElementById('chart2_div'));
      this.chart2.draw(dt2, this.options);
      i = 0;
      vs = [["Generation", "Diversity"]];
      _ref2 = this.ex.ds;
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        v = _ref2[_k];
        i += 1;
        vs.push([this.ex.sample * i, v]);
      }
      dt3 = google.visualization.arrayToDataTable(vs);
      this.chart3 = new google.visualization.LineChart(document.getElementById('chart3_div'));
      google.visualization.events.addListener(this.chart3, 'ready', function() {
        return google.visualization.events.addListener(_this.chart3, 'select', function() {
          if (_this.chart3.getSelection()[0] == null) {
            return;
          }
          if (_this.chart3.getSelection()[0].row == null) {
            return;
          }
          _this.n = _this.chart3.getSelection()[0].row;
          return _this.select(_this.n);
        });
      });
      return this.chart3.draw(dt3);
    };

    GoogleVisualize.prototype.tick = function() {
      return this.select(++this.n % this.ex.particlepos.length);
    };

    return GoogleVisualize;

  })();

  google.load('visualization', '1.0', {
    'packages': ['corechart']
  });

  google.setOnLoadCallback(function() {
    return $(function() {
      $("#stop").hide();
      $("#play").hide();
      return $("#run").click(function() {
        var arpso, cls, ex, inertia, interval, phi1, phi2, population, vis,
          _this = this;
        population = parseInt($("#population").val());
        if (isNaN(population)) {
          alert("Population must be a number");
          return;
        }
        inertia = parseFloat($("#inertia").val());
        if (isNaN(inertia)) {
          alert("Inertia must be a number");
          return;
        }
        phi1 = parseFloat($("#phi1").val());
        if (isNaN(phi1)) {
          alert("Phi1 must be a number");
          return;
        }
        phi2 = parseFloat($("#phi2").val());
        if (isNaN(phi2)) {
          alert("Phi2 must be a number");
          return;
        }
        if ($('#arpso').is(':checked')) {
          cls = ARPSO;
        } else {
          cls = PSO;
        }
        arpso = new cls((function(x) {
          return 1 + x.e(1) * x.e(1) + x.e(2) * x.e(2);
        }), $V([-50.0, -50.0]), $V([50.0, 50.0]), population, inertia, phi1, phi2);
        ex = new PSOExecutor(arpso, 10);
        ex.run(15000);
        window.ex = ex;
        vis = new GoogleVisualize(ex);
        vis.visualize();
        interval = null;
        $("#play").click(function() {
          if (interval == null) {
            interval = setInterval((function() {
              return vis.tick();
            }), 50);
            $("#play").hide();
            return $("#stop").show();
          }
        });
        $("#stop").click(function() {
          if (interval != null) {
            clearInterval(interval);
            $("#play").show();
            $("#stop").hide();
            return interval = null;
          }
        });
        $("#play").show();
        return $("#stop").hide();
      });
    });
  });

}).call(this);
